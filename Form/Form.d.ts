/// <reference types="node" />
import React, { Component } from 'react';
import { FormProps, FormState, FormValue } from './types';
/**
 * [click here](https://github.com/Audentio/react-components/blob/master/app/components/Form/README.md) for documentation
 *
 * @param {Function} onSubmit called with form data when form is submitted
 * @param {boolean} debug will render serliazed form state if true
 * @param {Function} onChange called whenever any field changes
 * @param {object} value pass to render controlled form and manage state yourself
 */
export declare class Form extends Component<FormProps, FormState> {
    static getDerivedStateFromProps(nextProps: FormProps, prevState: FormState): {
        value: FormValue;
    } | {
        value?: undefined;
    };
    static defaultProps: {
        buttonTypeName: string;
    };
    state: FormState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    validator: {
        [name: string]: import('yup').Schema<any>;
    };
    __formRef: React.RefObject<HTMLFormElement>;
    formUpdateTimer?: NodeJS.Timer;
    formID: string;
    /**
     * map form children and pass required props to form fields (anything with name prop)
     *
     * @param children Form children
     * @param initial Initial call. lets us reset validator
     */
    renderFields(children: React.ReactNode, initial?: boolean): React.ReactNode;
    /**
     * Form fields may be removed based on many factors
     * this function gets rid of removed field's values from form value
     * so we can submit data without manually filtering
     */
    getSubmitValue(__formValue?: FormValue, __children?: React.ReactChild): FormValue;
    private updateForm;
    onSubmit: (e: React.FormEvent<HTMLFormElement>) => Promise<void>;
    private onReset;
    /**
     * Convert validationErrors into object of input name keys and error values
     * this way we don't have to validation.inner.find() in renderFields
     */
    getValidationState(validationErrors: any): {};
    /**
     * Validate form using objectschema generated by `renderFields`
     */
    getValidation(value: FormValue): Promise<{
        isValid: boolean;
        errors: any;
    }>;
    /**
     * validate form and update state
     * throttled so it can be called on fast-triggering events
     */
    validate: (value: FormValue) => void;
    /**
     * Field change handler
     * - is passed to every form field by `renderFields` method
     * - called by form fields when change occurs
     */
    private onFieldChange;
    /**
     * Render state as indented JSON
     * <pre> to preserve whitespace
     */
    renderDebugState(): JSX.Element;
    render(): React.ReactNode;
}
